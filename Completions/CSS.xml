<?xml version="1.0" encoding="UTF-8"?>
<completions>
	<!-- At-Rules -->
	<provider name="at-rules">
		<syntax>vue</syntax>
		<selector>*:not(style.value)</selector>
		<expression>@[a-zA-Z0-9-]*</expression>
		
		<set>css.at-rules</set>
	</provider>
	<provider name="at-rules.import">
		<syntax>vue</syntax>
		<selector>style.at-rule.import</selector>
		<expression>(?&lt;=\s)[a-zA-Z0-9-]*</expression>
		
		<set>css.at-rule.import.values</set>
	</provider>
	<provider name="at-rules.charset">
		<syntax>vue</syntax>
		<selector>style.at-rule.charset css.string.double-quoted</selector>
		<expression>(?&lt;=")[a-zA-Z0-9-]*</expression>
		
		<set>css.at-rule.charset.values</set>
	</provider>
	<provider name="at-rule.media">
		<!-- @media keywords appearing outside of parenthesis -->
		<syntax>vue</syntax>
		<selector>style.at-rule.media</selector>
		<expression>(?&lt;=\s)[a-zA-Z0-9-]*</expression>
		
		<set>css.at-rule.media.keywords</set>
	</provider>
	<provider name="at-rule.media-feature">
		<!-- @media features appearing in parenthesis -->
		<syntax>vue</syntax>
		<selector>style.media-query-list.feature</selector>
		<expression>(?&lt;=\s|\()[a-zA-Z0-9-]*</expression>
		
		<set>css.at-rule.media.features</set>
	</provider>
	<provider name="at-rule.media-feature-value">
		<!-- @media features values appearing after a colon -->
		<syntax>vue</syntax>
		<selector>style.media-feature:has-child(style.media-feature.keyword:capture(feature))</selector>
		<expression>(?&lt;=\s|:)[a-zA-Z0-9-]*</expression>
		
		<set>css.at-rule.media.feature-values.${feature}</set>
	</provider>
	<provider name="at-rule.supports">
		<!-- @supports keywords appearing outside of parenthesis -->
		<syntax>vue</syntax>
		<selector>style.at-rule.supports</selector>
		<expression>(?&lt;=\s)[a-zA-Z0-9-]*</expression>
		
		<set>css.at-rule.supports.keywords</set>
	</provider>
	
	<!-- Selectors -->
	<provider name="pseudoelements">
		<syntax>vue</syntax>
		<selector>style.selector</selector>
		<expression>(?&lt;=::)[a-zA-Z0-9-]*</expression>
		
		<set>css.pseudoelements</set>
	</provider>
	<provider name="pseudoclasses">
		<syntax>vue</syntax>
		<selector>style.selector</selector>
		<expression>(?&lt;=(^|[^:]):)[a-zA-Z0-9-]*</expression>
		
		<set>css.pseudoclasses</set>
	</provider>
	
	<!-- Attributes -->
	<provider name="attributes">
		<syntax>vue</syntax>
		<selector>style.attribute-list, style.attribute.name</selector>
		<expression>(\b|-)[a-zA-Z0-9-]*</expression>
		
		<set>css.properties</set>
	</provider>
	
	<!-- Property-specific Attribute -->
	<provider name="values">
		<syntax>vue</syntax>
		<selector>style.attribute:has-child(style.attribute.name:capture(property)) style.value</selector>
		<expression>(?&lt;!\!)(\b|-|\!)[a-zA-Z0-9-]*</expression>
		
		<set>css.values.all</set>
		<set>css.values.${property}</set>
	</provider>
	<provider name="values.empty">
		<syntax>vue</syntax>
		<selector>style.attribute:has-child(style.attribute.name:capture(property)) style.value</selector>
		<expression capture="1">(?&lt;=:)\s*($)</expression>
		
		<set>css.values.all</set>
		<set>css.values.${property}</set>
	</provider>
	
	<!-- Custom Properties -->
	<provider name="values.custom-properties">
		<syntax>vue</syntax>
		<selector>style.value.function.var.property</selector>
		<expression>(?&lt;=\()([A-Za-zÀ-ÖØ-öø-ÿ0-9-_]+)</expression>
		
		<symbols type="property" />
	</provider>
	<provider name="values.custom-properties.empty">
		<syntax>vue</syntax>
		<selector>style.value.function.var</selector>
		<expression>(?&lt;=\()</expression>
		
		<symbols type="property" />
	</provider>
	
	<!-- Filepath Attributes -->
	<provider name="values.filepath">
		<syntax>vue</syntax>
		<selector>style.value.function.url style.string.filepath</selector>
		<expression>(?&lt;=[&quot;\s])[a-zA-Z0-9-_/]*</expression>
		
		<assistant type="files" />
	</provider>
</completions>